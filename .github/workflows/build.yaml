name: Luccakube
run-name: Luccakube on GitHub Actions ðŸš€
on:
  pull_request:
    branches:
      - "*"
  push:
    tags:
      - "*"
jobs:
  create-matrix:
      runs-on: ubuntu-latest
      outputs:
        ephemeral-clusters-matrix: ${{ steps.set-matrix.outputs.ephemeral-clusters-matrix }}
        clusters-matrix: ${{ steps.set-matrix.outputs.clusters-matrix }}
        max-parallel: ${{ steps.set-matrix.outputs.max-parallel }}
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - id: set-matrix
        name: Set matrix
        run: python3 create-matrix.py
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
  create-ephemeral-cluster:
    name: _${{ matrix.ClusterName }}
    needs: create-matrix
    if:  ${{ needs.create-matrix.outputs.clusters-matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.create-matrix.outputs.ephemeral-clusters-matrix) }}
      max-parallel: ${{ fromJson(needs.create-matrix.outputs.max-parallel) }}
    environment: 
      name: ${{ matrix.ClusterName }}
      url: https://${{ matrix.ClusterName }}.luccakube.tech
    steps:
    - name: ${{ matrix.ChangeType }} ${{ matrix.ClusterName }}
      run: echo ${{ matrix.ClusterName }} - ${{ matrix.ManifestPath }} && env | grep OS_ && env | grep OVH_
      env:
        TALOS_SECRETS_BUNDLE: ${{ secrets.TALOS_SECRETS_BUNDLE }}
        OS_AUTH_URL: ${{ vars.OS_AUTH_URL }}
        OS_IDENTITY_API_VERSION: ${{ vars.OS_IDENTITY_API_VERSION }}
        OS_DOMAIN_NAME: ${{ vars.OS_DOMAIN_NAME }}
        OS_TENANT_ID: ${{ secrets.OS_TENANT_ID }}
        OS_TENANT_NAME: ${{ secrets.OS_TENANT_NAME }}
        OS_USERNAME: ${{ secrets.OS_USERNAME }}
        OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
        OS_REGION_NAME: ${{ vars.OS_REGION_NAME }}
        OVH_API_CREDS: ${{ secrets.OVH_API_CREDS }}
  create-or-update-cluster:
    name: ${{ matrix.ClusterName }}
    needs: ["create-matrix", "create-ephemeral-cluster"]
    if: ${{ needs.create-matrix.outputs.clusters-matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.create-matrix.outputs.clusters-matrix) }}
      max-parallel: ${{ fromJson(needs.create-matrix.outputs.max-parallel) }}
    environment: 
      name: ${{ matrix.ClusterName }}
      url: https://${{ matrix.ClusterName }}.luccakube.tech
    steps:
    - name: ${{ matrix.ChangeType }} ${{ matrix.ClusterName }}
      run: echo ${{ matrix.ClusterName }} - ${{ matrix.ManifestPath }} && env | grep OS_ && env | grep OVH_
      env:
        TALOS_SECRETS_BUNDLE: ${{ secrets.TALOS_SECRETS_BUNDLE }}
        OS_AUTH_URL: ${{ vars.OS_AUTH_URL }}
        OS_IDENTITY_API_VERSION: ${{ vars.OS_IDENTITY_API_VERSION }}
        OS_DOMAIN_NAME: ${{ vars.OS_DOMAIN_NAME }}
        OS_TENANT_ID: ${{ secrets.OS_TENANT_ID }}
        OS_TENANT_NAME: ${{ secrets.OS_TENANT_NAME }}
        OS_USERNAME: ${{ secrets.OS_USERNAME }}
        OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
        OS_REGION_NAME: ${{ vars.OS_REGION_NAME }}
        OVH_API_CREDS: ${{ secrets.OVH_API_CREDS }}
  cleanup-ephemaral-clusters:
    name: Cleanup ephemeral environments
    needs: ["create-or-update-cluster", "create-matrix", "create-ephemeral-cluster"]
    if: ${{ needs.create-matrix.outputs.ephemeral-clusters-matrix != '' }}
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup ephemeral environments
      run: echo "Cleanup ephemeral environments ${{ toJson(needs.create-matrix.outputs.ephemeral-clusters-matrix) }}"